# SPDX-License-Identifier: LGPL-3.0-or-later
# SPDX-FileCopyrightText: Copyright © 2024 Intel Corporation. All rights reserved.
#
# @author Song Yoong Siang <yoong.siang.song@intel.com>
# @copyright © 2024 Intel Corporation. All rights reserved.
# @license LGPL-3.0-or-later
#
# developer assistant
###############################################################################

name: DEVELOPER ASSISTANT
on:
  pull_request:
    types: [opened, reopened]
  issue_comment:
permissions:
  actions: read
  pull-requests: read
  statuses: read
  contents: read
  issues: read

jobs:
  pr_agent_job:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip-ai-review') && ((contains(github.event.comment.body, '/review') || contains(github.event.comment.body, '/describe') || contains(github.event.comment.body, '/add_docs') || contains(github.event.comment.body, '/update_changelog')) && github.event.comment.user.login != 'nex-maximus' || (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'nex-maximus')) }}
    runs-on: ["ubuntu-latest"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region "${{ secrets.AWS_REGION }}" | docker login --username AWS --password-stdin 011528261982.dkr.ecr.us-west-2.amazonaws.com

      - name: Pull Docker Image
        run: |
          docker pull 011528261982.dkr.ecr.us-west-2.amazonaws.com/smartdevops:genai-stable

      - name: Verify Docker Image Contents
        run: |
          docker run --rm 011528261982.dkr.ecr.us-west-2.amazonaws.com/smartdevops:genai-stable ls -la /genai_agent

      - name: Run PR Agent Script
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
            -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
            -e AWS_REGION="${AWS_REGION}" \
            -e GITHUB_CONTEXT="${GITHUB_CONTEXT}" \
            -e GITHUB_EVENT_NAME="${GITHUB_EVENT_NAME}" \
            -e GITHUB_ACTION_AUTO_REVIEW="${GITHUB_ACTION_AUTO_REVIEW}" \
            -e GITHUB_ACTION_AUTO_DESCRIBE="${GITHUB_ACTION_AUTO_DESCRIBE}" \
            -e GITHUB_ACTION_UPDATE_TITLE="${GITHUB_ACTION_UPDATE_TITLE}" \
            -e GITHUB_ACTION_IGNORE_ISSUE_TAGS="${GITHUB_ACTION_IGNORE_ISSUE_TAGS}" \
            -e PR_NUMBER="${PR_NUMBER}" \
            -e API_KEY="${API_KEY}" \
            -e API_BASE="${API_BASE}" \
            -e STABLE_API_VERSION="${STABLE_API_VERSION}" \
            -e PREVIEW_API_VERSION="${PREVIEW_API_VERSION}" \
            -e DEPLOY_NAME="${DEPLOY_NAME}" \
            -e PUSH_TOKEN="${PUSH_TOKEN}" \
            -e CLIENT_ID="${CLIENT_ID}" \
            -e CLIENT_SECRET="${CLIENT_SECRET}" \
            -e GITHUB_EVENT_PATH="/genai_agent/event.json" \
            -v "${GITHUB_EVENT_PATH}:/genai_agent/event.json" \
            011528261982.dkr.ecr.us-west-2.amazonaws.com/smartdevops:genai-stable bash -c "
            . /genai_agent/genai_env/bin/activate && /genai_agent/get_pr_agent_details.sh
          "
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          GITHUB_ACTION_AUTO_REVIEW: true
          GITHUB_ACTION_AUTO_DESCRIBE: true
          GITHUB_ACTION_UPDATE_TITLE: false
          PR_NUMBER: ${{ github.event.number }}
          API_KEY: ${{ secrets.API_KEY }}
          API_BASE: ${{ secrets.API_BASE }}
          STABLE_API_VERSION: ${{ secrets.STABLE_API_VERSION }}
          PREVIEW_API_VERSION: ${{ secrets.PREVIEW_API_VERSION }}
          DEPLOY_NAME: ${{ secrets.DEPLOY_NAME }}
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

          ## Uncomment the line below to further customize code review output
          ## Once uncommented below, please add the parameter to the Run PR Agent Script steps above
          ## Example: -e GITHUB_ACTION_IGNORE_ISSUE_TAGS="${GITHUB_ACTION_IGNORE_ISSUE_TAGS}" \

          # Uncomment the line below to enable the pre-merge checks (Ensure to provide the keywords to Code Review Dev Team to include in pre-merge checks)
          # GITHUB_ACTION_ENABLE_PRE_MERGE_CHECKS: true
          
          # Uncomment the line below to add any extra instructions you wish to give to the LLM
          # GITHUB_ACTION_EXTRA_INSTRUCTIONS: 'Please give clear review for the user'

          # Uncomment the line below to push all the suggestions for all the files as a batch instead of pushing it per file in the PR
          # GITHUB_ACTION_BATCH_SUGGESTION_PUSH: true

          # To enable dependent context from external repo/internal repo, uncomment the line below and add details in .github/dependent_files.json.
          # Please refer to the wiki for the sample json file.
          # GITHUB_ACTION_ENABLE_DEPENDENT_CONTEXT: true

          # Uncomment the comma separated string below and modify it accordingly to skip specific aspects during review. Refer to the wiki for supported tags
          GITHUB_ACTION_IGNORE_ISSUE_TAGS: improvements, coding style, miscellaneous

          # Uncomment the line below to publish the review as a single comment instead of being published as separate comments for every suggestion
          # GITHUB_ACTION_SINGLE_REVIEW_COMMENT: true

          # Uncomment any of the required language macro from below and mention the version of the language being used in the project to get tailored suggestions as per mentioned version
          # LANG_VERSION_PYTHON: "NA"
          # LANG_VERSION_JAVASCRIPT: "NA"
          # LANG_VERSION_TYPESCRIPT: "NA"
          # LANG_VERSION_GO: "NA"
          # LANG_VERSION_CPP: "NA"
          # LANG_VERSION_C: "NA"
          # LANG_VERSION_SWIFT: "NA"
          # LANG_VERSION_PHP: "NA"
          # LANG_VERSION_RUBY: "NA"
          # LANG_VERSION_RUST: "NA"
          # LANG_VERSION_SCALA: "NA"
          # LANG_VERSION_KOTLIN: "NA"
          # LANG_VERSION_PERL: "NA"
          # LANG_VERSION_MARKDOWN: "NA"

          # Uncomment the line below to consider the ICP and Kernel Coding Guidelines for C Language Code
          # CODING_GUIDELINES_C_ICP_GUIDELINES: true
          # CODING_GUIDELINES_C_KERNEL_GUIDELINES: true